<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alog</title>
  
  <subtitle>AlBan&#39;s coding logs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://albaneo93.github.io/"/>
  <updated>2020-11-02T14:37:09.847Z</updated>
  <id>http://albaneo93.github.io/</id>
  
  <author>
    <name>AlBan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>intellij에서 실행 옵션 설정하기</title>
    <link href="http://albaneo93.github.io/2020/11/02/add-exec-env-intellij/"/>
    <id>http://albaneo93.github.io/2020/11/02/add-exec-env-intellij/</id>
    <published>2020-11-02T14:37:09.847Z</published>
    <updated>2020-11-02T14:37:09.847Z</updated>
    
    <content type="html"><![CDATA[<p>intellij 상에서 spring 프로젝트를 실행할 때, 따로 옵션을 설정해주어야 할 때가 있다.</p><p>ex) 개발 시 설정파일을 바꾸어주어야 할 때</p><ol><li>오른쪽 상단의 실행 버튼 왼쪽에 드롭다운 박스를 눌러 <strong>Edit Configuration</strong> 을 눌러준다</li></ol><ol start="2"><li>spring boot 섹션에서 밑에있는 Override parameters에 설정해주고자 하는 옵션의 이름과 값을 적어주면 끝!</li></ol><p>위의 이미지와 같이 옵션을 주었을 때,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar app.jar --spring.config.name=application-dev</span><br></pre></td></tr></table></figure><p>을 실행한것과 같다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;intellij 상에서 spring 프로젝트를 실행할 때, 따로 옵션을 설정해주어야 할 때가 있다.&lt;/p&gt;
&lt;p&gt;ex) 개발 시 설정파일을 바꾸어주어야 할 때&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;오른쪽 상단의 실행 버튼 왼쪽에 드롭다운 박스를 눌러 &lt;stro
      
    
    </summary>
    
    
      <category term="server" scheme="http://albaneo93.github.io/categories/server/"/>
    
      <category term="infra" scheme="http://albaneo93.github.io/categories/server/infra/"/>
    
    
      <category term="java" scheme="http://albaneo93.github.io/tags/java/"/>
    
      <category term="intellij" scheme="http://albaneo93.github.io/tags/intellij/"/>
    
  </entry>
  
  <entry>
    <title>Proxy에 대하여</title>
    <link href="http://albaneo93.github.io/2020/11/02/About-Proxy/"/>
    <id>http://albaneo93.github.io/2020/11/02/About-Proxy/</id>
    <published>2020-11-02T14:37:09.845Z</published>
    <updated>2020-11-02T14:37:09.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>다른사람을 대신/대리 하여 무엇인가를 하는 것 (중개)을 뜻한다</p><p>이런 의미에서 <a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9D%EC%8B%9C_%EC%84%9C%EB%B2%84" rel="external nofollow noopener noreferrer" target="_blank">프록시 서버</a>란 다른 서버가 하는 일을 대신하여 처리해주는 서버를 지칭하는 말이다</p><p>캐시/보안/트래픽 분산 등 여러 장점을 가질 수 있다.</p><p>프록시의 종류로는 포워드 프록시(Forward Proxy)와 리버스 프록시(Reverse Proxy)가 있는데,<br>네트워크 구조의 어떠한 위치에서 역할을 수행하는지에 따라 이름이 바뀐다.</p><p>네트워크 통신 구조를 크게 다음과 같이 정의하겠다.</p><h4 id="Client-사용자-Internet-인터넷-Server-서버"><a href="#Client-사용자-Internet-인터넷-Server-서버" class="headerlink" title="Client(사용자) - Internet(인터넷) - Server(서버)"></a>Client(사용자) - Internet(인터넷) - Server(서버)</h4><h2 id="포워드-프록시-Forward-Proxy"><a href="#포워드-프록시-Forward-Proxy" class="headerlink" title="포워드 프록시(Forward Proxy)"></a>포워드 프록시(Forward Proxy)</h2><p>포워드 프록시는, 사용자와 인터넷 사이에 위치해 프록시의 역할을 하는 컴퓨터를 Forward Proxy라고 한다.</p><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><h4 id="캐시"><a href="#캐시" class="headerlink" title="캐시"></a><a href="https://ko.wikipedia.org/wiki/%EC%BA%90%EC%8B%9C" rel="external nofollow noopener noreferrer" target="_blank">캐시</a></h4><blockquote><p>사용자가 요청한  내용의 데이터를 저장하고 있다가. 이후에 똑같은 요청이 오면, 저장하고 있던 값을 응답으로 주는 것</p></blockquote><ul><li>전송 시간 절약</li><li>불필요한 외부 전송이 필요 없음</li><li>외부 요청 감소 -&gt; 네트워크의 병목현상 방지</li></ul><h4 id="익명성"><a href="#익명성" class="headerlink" title="익명성"></a>익명성</h4><blockquote><p> 사용자가 보낸 요청을 감춘다</p></blockquote><p>사용자가 서버로 요청을 할 때, 프록시 서버에 대신해서 요청을 하고 응답을 받아달라고 하는 것이다</p><p> 그렇기 때문에 서버는 Proxy의 존재는 알지라도, 실질적으로 데이터를 요청하는 사용자의 정보를 알지 못한다.</p><p><sub>이러한 이유로 해커들이 자신들의 존재를 숨기기 위해 프록시서버를 이용하기도 한다</sub></p><h2 id="리버스-프록시-Reverse-Proxy"><a href="#리버스-프록시-Reverse-Proxy" class="headerlink" title="리버스 프록시(Reverse Proxy)"></a>리버스 프록시(Reverse Proxy)</h2><p>리버스 프록시는, 서버와 인터넷 사이에 위치해 프록시의 역할을 하는 컴퓨터를 Reverse Proxy라고 한다.</p><h3 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h3><h4 id="캐시-1"><a href="#캐시-1" class="headerlink" title="캐시"></a>캐시</h4><p>Forwrad Proxy의 캐시와 동일한 기능을 한다. 사용자가 요청한 데이터를 저장하고 있다가. 실질적인 데이터를 가진 서버에게 요청하지 않고, 저장하고 있던 값을 응답합니다.</p><h4 id="보안"><a href="#보안" class="headerlink" title="보안"></a>보안</h4><p>Forward Proxy와 다르게 서버의 정보를 감춥니다.</p><p>사용자는 서버에 요청을 한다고 생각하지만, 실제로는 Reverse Proxy가 서버의 역할을 ‘대신’해 사용자의 요청을 받고, 받은 요청의 결과를 사용자에게 응답으로 전달합니다</p><p>즉, 사용자는 실질적인 서버의 역할을 하는 컴퓨터의 정보는 알지 못하고, 오로지 Proxy Server의 정보만 알게됩니다.</p><h4 id="로드밸런싱-Load-Balancing-부하-분산"><a href="#로드밸런싱-Load-Balancing-부하-분산" class="headerlink" title="로드밸런싱(Load Balancing; 부하 분산)"></a>로드밸런싱(Load Balancing; 부하 분산)</h4><p><a href="https://ko.wikipedia.org/wiki/%EB%B6%80%ED%95%98%EB%B6%84%EC%82%B0" rel="external nofollow noopener noreferrer" target="_blank">로드밸런스 Wiki</a></p><p>둘 이상의 서버 컴퓨터의 앞에서 사용자의 요청을 받아, 서버의 상태에 맞게 요청을 분산시켜주는 역할을 뜻합니다.</p><p>대부분 서버의 상태에 따라 최상의 상태인 서버로 요청을 전달해주기 때문에,<br>로드밸런싱이 적용된 서비싀는사용자가 몰려도 균일한 서비스를 받을 수 있다는 특징이 있습니다.</p><p>대표적인 로드밸런싱 알고리즘으로 라운드로빈(Round Robin), 최소 연결(Least Connection), 최소 응답시간(Leas Response Time) 방식이 있습니다.</p><h2 id="참조-Reference"><a href="#참조-Reference" class="headerlink" title="참조(Reference)"></a>참조(Reference)</h2><p><a href="https://www.youtube.com/watch?v=YxwYhenZ3BE" rel="external nofollow noopener noreferrer" target="_blank">우아한Tech 유튜브 채널</a> 제이미님의 발표</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h2&gt;&lt;p&gt;다른사람을 대신/대리 하여 무엇인가를 하는 것 (중개)을 뜻한다&lt;/p&gt;
&lt;p&gt;이런 의미에서 &lt;a href
      
    
    </summary>
    
    
    
      <category term="server" scheme="http://albaneo93.github.io/tags/server/"/>
    
      <category term="network" scheme="http://albaneo93.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>spring-swagger2 </title>
    <link href="http://albaneo93.github.io/2020/08/16/spring-swagger2/"/>
    <id>http://albaneo93.github.io/2020/08/16/spring-swagger2/</id>
    <published>2020-08-16T11:12:43.000Z</published>
    <updated>2020-11-02T14:37:09.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger?"></a>Swagger?</h1><p>스프링 프레임워크 상에 작성한 API를 쉽게 문서화 시켜주는 라이브러리 입니다.</p><h2 id="Swagger의-사용"><a href="#Swagger의-사용" class="headerlink" title="Swagger의 사용"></a>Swagger의 사용</h2><h3 id="Swagger-설정"><a href="#Swagger-설정" class="headerlink" title="Swagger 설정"></a>Swagger 설정</h3><p>Swagger를 사용하기 위해서는 먼저 swagger 라이브러리를 추가해주어야 합니다.</p><p>본인의 프로젝트 설정에 맞춰 등록하시면 됩니다.</p><p><a href="https://mvnrepository.com/" rel="external nofollow noopener noreferrer" target="_blank">mvn repository</a>에 들어가서 해당하는 라이브러를 찾습니다.</p><ul><li>springfox swagger2</li><li>springfox swagger-ui</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line"><span class="comment">// springfox-swager2</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'io.springfox'</span>, <span class="string">name:</span> <span class="string">'springfox-swagger2'</span>, <span class="string">version:</span> <span class="string">'3.0.0'</span></span><br><span class="line"><span class="comment">// springfox-swager-ui</span></span><br><span class="line">compile <span class="string">group:</span> <span class="string">'io.springfox'</span>, <span class="string">name:</span> <span class="string">'springfox-swagger-ui'</span>, <span class="string">version:</span> <span class="string">'3.0.0'</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springfox-swagger2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springfox-swager-ui--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>의존성을 추가하였으면 Swagger 라이브러리의 설정을 위한 클래스를 생성합니다</p><p>설정 클래스에 들어가야될 필수 어노테이션으로 <code>@Configuration</code>과 <code>@EnableSwagger2</code>이 필요합니다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 후, 2개의 메서드를 작성해주어야 합니다.</p><ul><li>ApiInfo 타입을 반환하는 apiInfo() 메서드</li><li>Docket 타입을 반환하는 api() 메서드</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">      .title(<span class="string">"API의 타이틀 정보"</span>)</span><br><span class="line">      .version(<span class="string">"API 버전 정보"</span>)</span><br><span class="line">      .description(<span class="string">"API에 대한 설명"</span>)</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .grouName(<span class="string">"My-Group"</span>)</span><br><span class="line">      .apiInfo(apiInfo()) <span class="comment">// 위에서 작성한 apiInfo 메서드의 리턴값을 사용</span></span><br><span class="line">      .select()</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.board.Controller"</span>))</span><br><span class="line">      .paths(PatheSelectors.any())</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>apiInfo 메서드에서 반환하는 값은, Swagger에서 메인으로 보여질 정보를 설정한 객체를 반환합니다.</p><p>api 메서드에서는</p><ul><li>api 그룹 이름</li><li>이동 경로</li><li>보여질 api</li></ul><p>등이 설정됩니다</p><p>Swagger는 설정 클래스만 만든다고 완성이 되는 것이 아니라, 작성한 api 클래스에서 swagger를 적용하겠다는 어노테이션을 작성해주어야 합니다.</p><p>어노테이션의 이름은 <code>@ApiOperation()</code>으로 괄호에 속성값들이 들어가게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Some Controller</span></span><br><span class="line"><span class="meta">@GETMappingi</span>(<span class="string">"/board"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"간단한 설명을 적어줍니다"</span>, response = BoardDTO<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt;&gt; <span class="title">getBoardList</span>()</span>&#123;</span><br><span class="line">  <span class="comment">// get boardlist</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ApiOperation()</code>어노테이션을 swagger에서 보여줄 api에 작성해주면 사용하기 위한 설정은 끝이 납니다.</p><p>기본적으로 속성은</p><ul><li>value : 해당 메서드(api 호출시 반응하는)에 대한 간단한 설명</li><li>response : 성공적으로 메서드가 작동 시 반환하는 클래스의 타입</li></ul><p>두가지는 적어주는 것이 좋습니다.</p><p>vlaue 옵션 적용 결과</p><img src="/2020/08/16/spring-swagger2/swagger-value.png" class title="value 적용"><p>reponse 옵션 적용 결과</p><img src="/2020/08/16/spring-swagger2/swagger-response.png" class title="response 적용"><p>위의 이미지는 value 속성을 설정해주었을 때,</p><p>아래 이미지는 reponse 속성을 설정해주었을 때 이미지와 같이 보이게 됩니다</p><h3 id="Swagger-페이지-접속"><a href="#Swagger-페이지-접속" class="headerlink" title="Swagger 페이지 접속"></a>Swagger 페이지 접속</h3><blockquote><p><a href="http://ip주소/swagger-ui.html" rel="external nofollow noopener noreferrer" target="_blank">http://ip주소/swagger-ui.html</a></p></blockquote><p>위의 주소로 접속하면 위에서 설정한 값들이 보이게 됩니다</p><p>swagger는 보이는 것 뿐만 아니라, 클릭으로 기능이 제대로 작동하는지 까지 테스트 할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swagger&quot;&gt;&lt;a href=&quot;#Swagger&quot; class=&quot;headerlink&quot; title=&quot;Swagger?&quot;&gt;&lt;/a&gt;Swagger?&lt;/h1&gt;&lt;p&gt;스프링 프레임워크 상에 작성한 API를 쉽게 문서화 시켜주는 라이브러리 입니다.&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="spring" scheme="http://albaneo93.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="http://albaneo93.github.io/tags/spring/"/>
    
      <category term="java" scheme="http://albaneo93.github.io/tags/java/"/>
    
      <category term="springboot" scheme="http://albaneo93.github.io/tags/springboot/"/>
    
      <category term="swagger" scheme="http://albaneo93.github.io/tags/swagger/"/>
    
      <category term="swagger-ui" scheme="http://albaneo93.github.io/tags/swagger-ui/"/>
    
      <category term="api" scheme="http://albaneo93.github.io/tags/api/"/>
    
      <category term="documentation" scheme="http://albaneo93.github.io/tags/documentation/"/>
    
  </entry>
  
  <entry>
    <title>마크다운 문서 내부에 링크 적용하기</title>
    <link href="http://albaneo93.github.io/2020/08/11/use-headlink-in-markdown/"/>
    <id>http://albaneo93.github.io/2020/08/11/use-headlink-in-markdown/</id>
    <published>2020-08-11T02:32:58.000Z</published>
    <updated>2020-11-02T14:37:09.857Z</updated>
    
    <content type="html"><![CDATA[<p>마크다운 문서를 이용하면서 외부링크를 연결하는것이 아닌, 문서 내부의 특정 헤더에 연결을 하고싶은 경우가 있다.</p><p>마크다운 문서 내부의 헤드에 링크를 연결하고 싶은경우는 다음과 같이 사용하면 된다</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">보여지는 내용</span>](<span class="link">#연결할-헤드의-내용</span>)</span><br></pre></td></tr></table></figure><p>예시는 다음과 같다</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">띄어쓰기는 '-'로</span>](<span class="link">#마크다운-내부에서-헤드-링크</span>)</span><br><span class="line">[<span class="string">영어는 소문자로</span>](<span class="link">#use-link-in-markdown-document</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 마크다운 내부에서 헤드 링크</span></span><br><span class="line"><span class="section">#### Use link in Markdown document</span></span><br></pre></td></tr></table></figure><p>예시와 같이, <strong>띄어쓰기는 ‘-‘로 대치</strong>를 하고, <strong>영문의 경우엔 전부 소문자</strong>를 써야한다<br>또한 몇단계의 헤드던 링크는 <strong>헤더의 레벨에 상관 없이</strong> 하나의 #만 사용하여 링크를 건다</p><p>결과물은 아래와 같이 나오게된다</p><p><a href="#%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EB%82%B4%EB%B6%80%EC%97%90%EC%84%9C-%ED%97%A4%EB%93%9C-%EB%A7%81%ED%81%AC">띄어쓰기는 ‘-‘로</a><br><br></p><p><a href="#use-link-in-markdown-document">영어는 소문자로</a></p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><h2 id="마크다운-내부에서-헤드-링크"><a href="#마크다운-내부에서-헤드-링크" class="headerlink" title="마크다운 내부에서 헤드 링크"></a>마크다운 내부에서 헤드 링크</h2><br><br><br><h4 id="Use-link-in-Markdown-document"><a href="#Use-link-in-Markdown-document" class="headerlink" title="Use link in Markdown document"></a>Use link in Markdown document</h4><br><br><br><h2 id="NOTICE"><a href="#NOTICE" class="headerlink" title="NOTICE"></a>NOTICE</h2><p>현재, 프레임 워크 또는 테마의 문제로 마지막 헤드에는 링크가 걸리지 않는 문제가 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;마크다운 문서를 이용하면서 외부링크를 연결하는것이 아닌, 문서 내부의 특정 헤더에 연결을 하고싶은 경우가 있다.&lt;/p&gt;
&lt;p&gt;마크다운 문서 내부의 헤드에 링크를 연결하고 싶은경우는 다음과 같이 사용하면 된다&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="markdown" scheme="http://albaneo93.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://albaneo93.github.io/tags/markdown/"/>
    
      <category term="headlink" scheme="http://albaneo93.github.io/tags/headlink/"/>
    
      <category term="link" scheme="http://albaneo93.github.io/tags/link/"/>
    
      <category term="usage" scheme="http://albaneo93.github.io/tags/usage/"/>
    
  </entry>
  
  <entry>
    <title>Lombok 플러그인</title>
    <link href="http://albaneo93.github.io/2020/08/10/lombok/"/>
    <id>http://albaneo93.github.io/2020/08/10/lombok/</id>
    <published>2020-08-10T12:48:57.000Z</published>
    <updated>2020-11-02T14:37:09.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><p>자바에서 Model(DTO, VO, Domain) 오브젝트를 만들때, getter/setter 등 반복적으로 만드는 코드를 어노테이션의 선언을 통해 간단하게 해결해주는 라이브러리</p><p>MIT 라이센스(<a href="%5Bhttps://ko.wikipedia.org/wiki/MIT_%ED%97%88%EA%B0%80%EC%84%9C%5D(https://ko.wikipedia.org/wiki/MIT_%ED%97%88%EA%B0%80%EC%84%9C)">MIT LICENSE</a>)를 따른다</p><h2 id="Lombok-사용"><a href="#Lombok-사용" class="headerlink" title="Lombok 사용"></a>Lombok 사용</h2><h3 id="라이브러리-의존성-추가"><a href="#라이브러리-의존성-추가" class="headerlink" title="라이브러리 의존성 추가"></a>라이브러리 의존성 추가</h3><p>기본적으로 <a href="https://mvnrepository.com/artifact/org.projectlombok/lombok" rel="external nofollow noopener noreferrer" target="_blank">mvn repository</a> 에서 제공하는 사용법을 따르면 편하다</p><h4 id="Maven을-사용하는-경우"><a href="#Maven을-사용하는-경우" class="headerlink" title="Maven을 사용하는 경우"></a>Maven을 사용하는 경우</h4><p>의존성 추가를 위해 다음 내용을 pom.xml에 추가</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Gradle을-사용하는-경우"><a href="#Gradle을-사용하는-경우" class="headerlink" title="Gradle을 사용하는 경우"></a>Gradle을 사용하는 경우</h4><p>build.gradle에 의존성을 추가</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providedCompile <span class="string">group:</span> <span class="string">'org.projectlombok'</span>, <span class="string">name:</span> <span class="string">'lombok'</span>, <span class="string">version:</span> <span class="string">'1.18.12'</span></span><br></pre></td></tr></table></figure><h3 id="Model클래스에-어노테이션-선언"><a href="#Model클래스에-어노테이션-선언" class="headerlink" title="Model클래스에 어노테이션 선언"></a>Model클래스에 어노테이션 선언</h3><h4 id="어노테이션의-종류"><a href="#어노테이션의-종류" class="headerlink" title="어노테이션의 종류"></a>어노테이션의 종류</h4><ul><li><p><code>@Data</code> : Data어노테이션은 다음의 어노테이션들 모두 포함한다</p><ul><li><code>@ToString</code> : 모든 필드에 대한 toString() 메서드 생성</li><li><code>@EqualsAndHashCode</code> : equals와 hashcode 메서드 생성</li><li><code>@Getter</code> : 모든 필드에 대한 getter생성</li><li><code>@Setter</code> : final로 선언된 필드들에 대하여 setter를 생성</li><li><code>@RequiredArgsConstructor</code> : final로 선언된 필드를 인자로 갖는 생성자를 생성한다</li></ul></li><li><p><code>@NoArgsConstructor</code> : 기본 생성자(인자를 갖지 않는) 생성</p></li><li><p><code>@AllArgsConstructor</code> : 모든 필드를 인자로 갖는 생성자 생성</p></li><li><p><code>@builder</code> : 객체의 생성을 도와주는 메서드를 생성 <a href="#builder-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B2%95">Builder 어노테이션 사용법</a></p></li><li><p><code>@NonNull</code> : 객체 생성시 해당 필드의 null체크를 한다. 해당 필드가 null로 넘어오면, NullPointerException 예외를 발생시킨다</p></li></ul><h4 id="Builder-어노테이션의-사용법"><a href="#Builder-어노테이션의-사용법" class="headerlink" title="Builder 어노테이션의 사용법"></a>Builder 어노테이션의 사용법</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Model class</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 선언된 모델클래스의 객체를 생성할 때,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberController</span></span>&#123;</span><br><span class="line">  <span class="comment">// another methods ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMember</span><span class="params">(@RequestBody MemberDTO dto)</span></span>&#123;</span><br><span class="line">    Member member = Member.builder()</span><br><span class="line">      .id(dto.getId())</span><br><span class="line">      .name(dto.getName())</span><br><span class="line">      .password(dto.getPassword())</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// another methods ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://projectlombok.org/" rel="external nofollow noopener noreferrer" target="_blank">Project Lombok 공식 홈페이지</a></p><p><a href="https://goddaehee.tistory.com/95" rel="external nofollow noopener noreferrer" target="_blank">갓대희님의 티스토리 블로그</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lombok&quot;&gt;&lt;a href=&quot;#Lombok&quot; class=&quot;headerlink&quot; title=&quot;Lombok&quot;&gt;&lt;/a&gt;Lombok&lt;/h1&gt;&lt;p&gt;자바에서 Model(DTO, VO, Domain) 오브젝트를 만들때, getter/setter 등
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue EventBus 사용</title>
    <link href="http://albaneo93.github.io/2020/08/10/Vue-eventbus/"/>
    <id>http://albaneo93.github.io/2020/08/10/Vue-eventbus/</id>
    <published>2020-08-10T05:14:26.000Z</published>
    <updated>2020-11-02T14:37:09.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="EventBus-컴포넌트-생성"><a href="#EventBus-컴포넌트-생성" class="headerlink" title="EventBus 컴포넌트 생성"></a>EventBus 컴포넌트 생성</h3><p>EventBus.js로 Event Bus를 담당할 컴포넌트를 생성한다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/utils/EventBus.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eventbus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> eventbus;</span><br></pre></td></tr></table></figure><p>이렇게 파일을 생성하면 기본적인 준비는 끝</p><h3 id="발행"><a href="#발행" class="headerlink" title="발행"></a>발행</h3><p><code>$emit()</code> 을 이용해 이벤트를 발행할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 이벤트를 발행할 Vue 컴포넌트</span><br><span class="line">&#x2F;&#x2F; Emit.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Button @click&#x3D;&quot;emitEvent&quot;&gt;</span><br><span class="line">    이벤트 발행</span><br><span class="line">  &lt;&#x2F;Button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Eventbus from &#39;@&#x2F;utils&#x2F;EventBus&#39;</span><br><span class="line">  export default&#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">      emitEvent()&#123;</span><br><span class="line">        &#x2F;&#x2F; 발행할 이벤트의 이름과 함께, 넘겨주소 싶다면 변수를 추가해줄 수 있다.</span><br><span class="line">        Eventbus.$emit(&#39;myEvent&#39;, &#39;변수를 넘겨줄께요&#39;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>위의 코드에서는 <strong>myEvent</strong>라는 이벤트 이름과 함께, ‘변수를 넘겨줄께요’라는 String 변수를 인자로 이벤트를 발행하였다</p><h3 id="구독"><a href="#구독" class="headerlink" title="구독"></a>구독</h3><p>이벤트의 구독은 <code>$on</code> 을 통해 이벤트 구독할 수 있다.</p><p>더해서, vue의 template에서 <code>@myEvent</code> 처럼, 클릭이벤트를 등록하듯이 이벤트를 등록할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 이벤트를 구독할 Vue 컴포넌트</span><br><span class="line">&#x2F;&#x2F; Receive.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">      &#123;&#123;receive&#125;&#125;</span><br><span class="line">  &lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Eventbus from &#39;@&#x2F;utils&#x2F;EventBus&#39;</span><br><span class="line">  export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        receive:&#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">      EventBus.$on(&#39;myEvent&#39;, (arg)&#x3D;&gt;&#123;</span><br><span class="line">        this.receive &#x3D; arg;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>Emit.vue 에서 ‘이벤트 발행’ 버튼을 클릭해 이벤트를 발행한 후,</p><p>이벤트를 구독하는 컴포넌트인 Receive.vue 컴포넌트를 실행하게 되면, created hook에서 이벤트를 구독하고 receive 변수에 넘겨주었던 String 인자가 할당되어, 화면에 표시된다</p><h3 id="삭제"><a href="#삭제" class="headerlink" title="삭제"></a>삭제</h3><p>이벤트의 삭제는 <code>$off</code>를 이용한다.</p><p>위의 예제에서, 컴포넌트가 삭제될 때 발행한 이벤트를 삭제하고 싶다면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  beforeDestory()&#123;</span><br><span class="line">    EventBus.$off(&#39;myEvent&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>이벤트가 계속해서 남아있는게 싫다면, 이벤트를 구독 후 삭제한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">methods:&#123;</span><br><span class="line">      eventHandler()&#123;</span><br><span class="line">        &#x2F;&#x2F; 이벤트 구독</span><br><span class="line">  EventBus.$on(&#39;myEvent&#39;, (arg)&#x3D;&gt;&#123;</span><br><span class="line">        this.receive &#x3D; arg;</span><br><span class="line">      &#125;);</span><br><span class="line">        &#x2F;&#x2F; 이벤트 삭제</span><br><span class="line">        EventBus.$off(&#39;myEvent&#39;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;EventBus-컴포넌트-생성&quot;&gt;&lt;a href=&quot;#EventBus-컴포넌트-생성&quot; class=&quot;headerlink&quot; title=&quot;EventBus 컴포넌트 생성&quot;&gt;&lt;/a&gt;EventBus 컴포넌트 생성&lt;/h3&gt;&lt;p&gt;EventBus.js로 E
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://albaneo93.github.io/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://albaneo93.github.io/tags/vue/"/>
    
      <category term="Event Bus" scheme="http://albaneo93.github.io/tags/Event-Bus/"/>
    
      <category term="vue-cli" scheme="http://albaneo93.github.io/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>리눅스의 퍼미션과 설정 방법</title>
    <link href="http://albaneo93.github.io/2020/08/09/linux-permission/"/>
    <id>http://albaneo93.github.io/2020/08/09/linux-permission/</id>
    <published>2020-08-09T04:11:00.000Z</published>
    <updated>2020-11-02T14:37:09.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="리눅스-파일-정보-보기"><a href="#리눅스-파일-정보-보기" class="headerlink" title="리눅스 파일 정보 보기"></a>리눅스 파일 정보 보기</h2><p>리눅스를 기반으로 하는 운영체제에서는 ls(list) 명령어가 있습니다.</p><p>ls명령어에 -al 옵션을 주어 <code>ls -al</code> 명령어를 이용하면 파일의 해당 디렉토리에 존재하는 파일들의 상세정보를 볼 수 있습니다</p><p>drwxr-xr-x 2 root root 4096 Apr 22 16:59 my-file</p><p>파일type 퍼미션 링크수 소유자 소유그룹 용량 생성날짜 파일이름</p><ul><li><p>파일 Type </p><ul><li>d : directory</li><li>l : 링크 파일</li><li>- : 일반 파일</li></ul></li><li><p>퍼미션 : 해당 파일 or 디렉토리에 어떠한 퍼미션이 부여되어 있는지 표시</p></li><li><p>링크 수 : 해당 파일이 링크된 수 (링크 : windows운영체제의 바로가기와 같음)</p></li><li><p>소유자 : 해당 파일의 소유자 이름</p></li><li><p>소유 그룹 : 해당 파일을 소유한 그룹의 이름. 기본값으로 소유자가 속한 그룹으로 지정된다</p></li><li><p>용량 : 파일의 용량</p></li><li><p>생성 날짜 : 파일이 생성된 날짜</p></li><li><p>파일이름 : 파일의 이름</p></li></ul><h2 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h2><p>파일의 권한 등을 설정해, 허가되지 않은 사용자가 읽거나 수정하지 못하도록 한다</p><h3 id="퍼미션의-종류"><a href="#퍼미션의-종류" class="headerlink" title="퍼미션의 종류"></a>퍼미션의 종류</h3><ul><li>읽기(r : Read) : 읽기권한</li><li>쓰기(w : Write) : 쓰기권한 </li><li>실행(x : eXecute) : 실행권한</li></ul><h3 id="퍼미션의-사용자-설정"><a href="#퍼미션의-사용자-설정" class="headerlink" title="퍼미션의 사용자 설정"></a>퍼미션의 사용자 설정</h3><ul><li>소유자 : 파일 소유자에 대한 퍼미션</li><li>그룹 : 파일의 소유그룹에 대한 퍼미션</li><li>공개 : 모든 사용자들에 대한 퍼미션</li></ul><blockquote><p>소유자 - 그룹 - 공개 순으로 rwx가 반복되어 나타난다</p></blockquote><p>즉, rwx가 한묶음로 3개가 나타나며, 이는 각각 소유자, 그룹, 공개에 대한 파일권한이 된다</p><h2 id="Permission-변경"><a href="#Permission-변경" class="headerlink" title="Permission 변경"></a>Permission 변경</h2><p>리눅스에 기반 운영체제에서는 <code>chmod</code> 명령어를 이용해 파일의 permission을 변경할 수 있다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [변경할 퍼미션의 값] [변경할 파일]</span><br></pre></td></tr></table></figure><p>퍼미션의 값은 다음과 같이 나타낸다</p><ul><li>읽기(r) : 4</li><li>쓰기(w) : 2</li><li>실행(x) : 1</li></ul><p>제일 오른쪽 자리인 실행 권한 자리부터 <code>2^0</code>, <code>2^1</code>, <code>2^2</code> 을 나타낸다</p><p>이를 합산하여, 각 사용자에 맞는 권한을 연속해서 적어주면 된다</p><p>예를 들어, MyProgram.java를 소유자에 모두 허용( rwx ), 그룹과 공개에는 읽기와 실행만 허용(r-x) 하고싶다면</p><ul><li>rwx : 4  + 2 + 1 = 7</li><li>r-x : 4 + 0 + 1 = 5</li></ul><p>이므로, 소유자-소유 그룹-공개 순으로 755를 권한으로 주면 된다</p><p>완성된 명령어는 다음과 같다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 MyProgram.java</span><br></pre></td></tr></table></figure><p>chmod에는 <code>-R</code> 옵션이 있는데, 해당 옵션은 recursive 즉, 지정한 파일부터 하위 폴더 및 파일까지 모두 권한을 변경하는 옵션이다</p><h2 id="파일의-소유자-변경하기"><a href="#파일의-소유자-변경하기" class="headerlink" title="파일의 소유자 변경하기"></a>파일의 소유자 변경하기</h2><p>소유자 변경은 chown 명령어를 통해 할 수 있다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [변경할 소유자] [변경할 파일]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown secondUser MyProgram.java</span><br></pre></td></tr></table></figure><p>또한, 소유자에는 소유그룹을 넣어줄 수 도 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown anotherUserGroup MyProgram.java</span><br></pre></td></tr></table></figure><p>위와같이 명령어를 사용한다면, MyProgram.java의 소유권은 anotherUserGroup의 소유가 된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://conory.com/blog/19194" rel="external nofollow noopener noreferrer" target="_blank">conory님의 블로그</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;리눅스-파일-정보-보기&quot;&gt;&lt;a href=&quot;#리눅스-파일-정보-보기&quot; class=&quot;headerlink&quot; title=&quot;리눅스 파일 정보 보기&quot;&gt;&lt;/a&gt;리눅스 파일 정보 보기&lt;/h2&gt;&lt;p&gt;리눅스를 기반으로 하는 운영체제에서는 ls(list) 
      
    
    </summary>
    
    
      <category term="os" scheme="http://albaneo93.github.io/categories/os/"/>
    
      <category term="운영체제" scheme="http://albaneo93.github.io/categories/os/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/"/>
    
    
      <category term="linux" scheme="http://albaneo93.github.io/tags/linux/"/>
    
      <category term="permission" scheme="http://albaneo93.github.io/tags/permission/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 해싱 알고리즘 사용하기</title>
    <link href="http://albaneo93.github.io/2020/07/11/java-hasing/"/>
    <id>http://albaneo93.github.io/2020/07/11/java-hasing/</id>
    <published>2020-07-11T01:00:37.000Z</published>
    <updated>2020-11-02T14:37:09.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="해싱알고리즘"><a href="#해싱알고리즘" class="headerlink" title="해싱알고리즘"></a>해싱알고리즘</h2><p>해싱알고리즘은 <a href="%5Bhttps://ko.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98%5D(https://ko.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98)">해시 함수</a>를 기반으로 하는 암호화 알고리즘 중 하나입니다.</p><p>해싱 알고리즘이 암호화에 사용되는 이유는 <a href>해시함수의 특성</a>에서 비롯됩니다.</p><h2 id="해시함수-구현"><a href="#해시함수-구현" class="headerlink" title="해시함수 구현"></a>해시함수 구현</h2><p>Java에서는 기본적으로 해시 알고리즘을 사용하는 라이브러리를 제공하고 있습니다</p><p><code>java.security.MessageDigest</code>에 해당 라이브러리가 존재하며, 이를 이용하여 문자열에 해시 처리가 가능합니다.</p><p><a href="https://docs.oracle.com/javase/7/docs/api/java/security/MessageDigest.html" rel="external nofollow noopener noreferrer" target="_blank">MessageDigest</a>의 문서</p><p>MessageDigest에서는 MD5, SHA-1, SHA-256을 사용하고 있으며, SHA-1의 사용은 권장하지 않으므로</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 가장 기본적인 형태의 해시함수 구현</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] hasing(String src) <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">  MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA-256"</span>);<span class="comment">// 해시 알고리즘에서 사용할 알고리즘의 종류를 적어준다.</span></span><br><span class="line">  md.update(msg.getBytes());</span><br><span class="line">  <span class="keyword">return</span> md.digest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 위와 형태가 비슷하지만 암호화의 결과물로 나온 바이트 타입의 배열을 16진수로 바꾸어 알아보기 힘들게 한다</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hasing</span><span class="params">(String src)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">  MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA-256"</span>);</span><br><span class="line">  md.update(msg.getBytes());</span><br><span class="line">  StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">byte</span> b : md.digest())&#123;</span><br><span class="line">    <span class="comment">// 바이트를 2자리의 16진수로 바꾸는데, 남는자리가 생긴다면 0을 추가한다</span></span><br><span class="line">    sb.append(String.format(<span class="string">"%02x"</span>, b));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;해싱알고리즘&quot;&gt;&lt;a href=&quot;#해싱알고리즘&quot; class=&quot;headerlink&quot; title=&quot;해싱알고리즘&quot;&gt;&lt;/a&gt;해싱알고리즘&lt;/h2&gt;&lt;p&gt;해싱알고리즘은 &lt;a href=&quot;%5Bhttps://ko.wikipedia.org/wiki/%ED%
      
    
    </summary>
    
    
      <category term="java" scheme="http://albaneo93.github.io/categories/java/"/>
    
      <category term="server" scheme="http://albaneo93.github.io/categories/java/server/"/>
    
    
      <category term="java" scheme="http://albaneo93.github.io/tags/java/"/>
    
      <category term="algorithm" scheme="http://albaneo93.github.io/tags/algorithm/"/>
    
      <category term="hash" scheme="http://albaneo93.github.io/tags/hash/"/>
    
      <category term="encrypt" scheme="http://albaneo93.github.io/tags/encrypt/"/>
    
  </entry>
  
  <entry>
    <title>Floyd-Warshall Algorithm, 플로이드-와샬</title>
    <link href="http://albaneo93.github.io/2020/06/28/Floyd-Warshall-Algorithm/"/>
    <id>http://albaneo93.github.io/2020/06/28/Floyd-Warshall-Algorithm/</id>
    <published>2020-06-28T10:42:59.000Z</published>
    <updated>2020-11-02T14:37:09.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h2><ul><li>A지점에서 B지점으로 가는 경로가 존재하고, A-&gt;K &amp;&amp; K-&gt;B 가 가능한 K지점이 존재할 때, 둘 중 적은 비용으로 이동이 가능한 경로를 찾는 알고리즘</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Floyd_Warshall</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> INF = Integer.MaxValue;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> N;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span>[][] map;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flo_war</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>( i != j )&#123;</span><br><span class="line">            <span class="comment">// map[i][j] 는 현재까지 찾은 i에서 j로가는 가장 적은 비용</span></span><br><span class="line">            map[i][j] = Integer.min(map[i][j], map[i][k] + map[j][k]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    N = sc.nextInt();</span><br><span class="line">    map = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++)&#123;</span><br><span class="line">        map[i][j] = sc.nextInt();</span><br><span class="line">        <span class="comment">// 자기 자신에게 돌아오는 길을 없음을 나타낸다</span></span><br><span class="line">        <span class="keyword">if</span>(map[i][j] == <span class="number">0</span>) map[i][j] = INF;</span><br><span class="line">        <span class="keyword">if</span>(i==j) map[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><p>다중 출발점에서 다중 도착점으로 가는 최소시간(거리)를 구하는 알고리즘으로<br>O(n^3)의 시간복잡도를 갖는다<br>위와 같은 시간복잡도를 갖는 이유는 출발점, 도착점에 대해 갈 수 있는 모든 다른점에 대해 최솟값을 찾기 때문이다<br>그렇기 때문에, 알고리즘의 작동만 이해한다면 매우 간단한 수준의 알고리즘이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;요약&quot;&gt;&lt;a href=&quot;#요약&quot; class=&quot;headerlink&quot; title=&quot;요약&quot;&gt;&lt;/a&gt;요약&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A지점에서 B지점으로 가는 경로가 존재하고, A-&amp;gt;K &amp;amp;&amp;amp; K-&amp;gt;B 가 가능한 K지점이 존
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring Bean</title>
    <link href="http://albaneo93.github.io/2020/06/16/Spring-Bean/"/>
    <id>http://albaneo93.github.io/2020/06/16/Spring-Bean/</id>
    <published>2020-06-16T14:54:37.000Z</published>
    <updated>2020-11-02T14:37:09.846Z</updated>
    
    <content type="html"><![CDATA[<p>빈 (Bean)</p><p>Spring IoC 컨테이너가 관리하는 자바 객체를 빈(Bean)이라 한다.</p><p>개발자가 new 연산자로 생성하는 객체는 빈이라고 할 수 없다.</p><h2 id="Spring-IoC-컨테이너에-빈을-등록하는-법"><a href="#Spring-IoC-컨테이너에-빈을-등록하는-법" class="headerlink" title="Spring IoC 컨테이너에 빈을 등록하는 법"></a>Spring IoC 컨테이너에 빈을 등록하는 법</h2><p>방법은 다양하지만 크게 두가지 방법이 있다.</p><ol><li>Component Scanning</li><li>빈 설정파일에 직접 빈을 등록</li></ol><h3 id="Component-Scan"><a href="#Component-Scan" class="headerlink" title="Component Scan"></a>Component Scan</h3><p><code>@ComponentScan</code> 어노테이션과 <code>@Component</code> 어노테이션을 사용해서 빈을 등록하는 방법</p><p>SpringBoot 프로젝트 생성시 기본적으로 만들어지는 xxxApplication 클래스에 선언된 <code>@SpringBootApplication</code> 어노테이션을 보면, @ComponentScan어노테이션이 내부에 선언되어 있다.<br>그렇기 때문에, application 실행 시 이 클래스가 있는 패키지와 모든 하위패키지를 검사해 <code>@Component</code> 어노테이션을 사용하는 클래스를 찾고, 해당 클래스의 객체를 생성해 컨테이너의 빈에 등록한다</p><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>어느 지점부터 컴포넌트를 찾을지 알려주는 역할<br>해당 어노테이션이 선언되어있는 클래스의 패키지에서부터 모든 하위 패키지의 클래스를 찾아보며 <code>@Component</code> 또는 이를 사용하는 다른 어토네이션이 붙은 클래스를 찾는다</p><p><code>@Component</code>어노테이션을 사용하는 어노테이션</p><ul><li>@Controller</li><li>@Service</li><li>@Repository</li></ul><h4 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h4><p>찾아서 빈으로 등록할 클래스를 의미</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberController</span></span>&#123;</span><br><span class="line"><span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="빈-설정파일에-직접-빈을-등록"><a href="#빈-설정파일에-직접-빈을-등록" class="headerlink" title="빈 설정파일에 직접 빈을 등록"></a>빈 설정파일에 직접 빈을 등록</h3><p>빈 설정파일은 xml과 자바 설정파일로 작성할 수 있으며, 자바 설정파일을 많이 사용한다</p><p>자바 설정파일은 자바 클래스를 생성해 작성이 가능하며, <code>xxxCongifuration</code>과 같이 명명하고, 클래스에 <code>@Configuration</code> 어노테이션을 선언 한 다음, 내부에 <code>@Bean</code> 어노테이션을 사용해 빈(Bean)을 정의한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberConfiguration</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MemberController <span class="title">memberController</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 리턴되는 객체가 IoC 컨테이너에 빈으로 등록된다</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MemberController();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Configuration</code> 어노테이션 또한 @Component를 사용하기 때문에 @ComponentScan의 스캔 대상이 되고, 빈 설정파일이 읽힐 때 그안에 정의한 빈들이 IoC컨테이너에 등록이 된다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;빈 (Bean)&lt;/p&gt;
&lt;p&gt;Spring IoC 컨테이너가 관리하는 자바 객체를 빈(Bean)이라 한다.&lt;/p&gt;
&lt;p&gt;개발자가 new 연산자로 생성하는 객체는 빈이라고 할 수 없다.&lt;/p&gt;
&lt;h2 id=&quot;Spring-IoC-컨테이너에-빈을-등록하
      
    
    </summary>
    
    
      <category term="spring" scheme="http://albaneo93.github.io/categories/spring/"/>
    
    
      <category term="spring boot" scheme="http://albaneo93.github.io/tags/spring-boot/"/>
    
      <category term="spring" scheme="http://albaneo93.github.io/tags/spring/"/>
    
      <category term="bean" scheme="http://albaneo93.github.io/tags/bean/"/>
    
      <category term="component" scheme="http://albaneo93.github.io/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>spring 의존성 주입 방식</title>
    <link href="http://albaneo93.github.io/2020/06/16/spring-ioc/"/>
    <id>http://albaneo93.github.io/2020/06/16/spring-ioc/</id>
    <published>2020-06-16T14:33:33.000Z</published>
    <updated>2020-11-02T14:37:09.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="필드-주입"><a href="#필드-주입" class="headerlink" title="필드 주입"></a>필드 주입</h2><p><code>@Autowired</code>를 이용한 의존성 주입 방식<br>의존성을 갖는 변수를 선언하고 해당 변수의 위에 <code>@Autowired</code> 어노테이션을 선언한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MemberRepository repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Setter"><a href="#Setter" class="headerlink" title="Setter"></a>Setter</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- root-context.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">ref</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>또는 코드 내에서 setter 메서드 위에 <code>@Autowired</code> 어노테이션을 선언한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> MemberRepository repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemberRepository</span> <span class="params">(MemberRepository memberRepository)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.repository = memberRepository;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- root-context.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">""</span></span></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> MemberRepository repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MemberService</span><span class="params">(MemberRepository memberRepository)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.repository = memberRepository;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lombok을-이용한-생성자-주입-방법"><a href="#Lombok을-이용한-생성자-주입-방법" class="headerlink" title="Lombok을 이용한 생성자 주입 방법"></a>Lombok을 이용한 생성자 주입 방법</h3><p>Lombok라이브러리는 객체를 나타내는 클래스에서 자주 사용한 getter와 setter, toString 등을 어노테이션의 선언만으로 간단하게 사용할 수 있게 해주는 라이브러리이다.<br>Lombok에서 제공하는 어노테이션 중 <code>@AllArgsConstructor</code>어노테이션이 있는데, 이 어노테이션은 클래스의 멤버 변수를 모두 이용하여 생성자를 만들어 준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> MemberRepository repository;</span><br><span class="line"><span class="keyword">private</span> Hashing hashing; <span class="comment">// 사용자의 패스워드를 해시값으로 변환시키기 위한 클래스</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이와 같이 작성하면 직접 생성자를 작성해주지 않아도, Lombok라이브러리가 생성자를 작성해주기 때문에 조금 더 쉽게, 생성자를 통한 의존성 주입이 가능하다.</p><ul><li>Spring 4.3 부터는 생성자가 하나이고, 의존성이 있는 클래스가 빈으로 등록되어 있으면 생성자를 이용한 의존성 주입에서 @Autowired 어노테이션의 생략이 가능하다</li></ul><h2 id="어떤-방법을-써야할까"><a href="#어떤-방법을-써야할까" class="headerlink" title="어떤 방법을 써야할까??"></a>어떤 방법을 써야할까??</h2><p>스프링 프레임워크의 공식문서에서는 생성자를 통한 의존성 주입을 권장하고 있다.<br>이유는 생성자를 통한 의존성 주입을 할 때, 필수적으로 사용해야하는 의존성 없이는 인스턴스를 만들지 못하도록 강제할 수 있기 때문이다</p><p>예를 들어, MemberService가 MemberRepository 없이 제대로 동작할 수 없다면, MemberService 객체입장에서 MemberRepository의 객체는 반드시 있어야 하는 객체이다<br>이를 강제할 수 있는 방법이 생성자를 통한 의존성 주입인 것이다.</p><h3 id="필드-setter-주입-방법의-필요성"><a href="#필드-setter-주입-방법의-필요성" class="headerlink" title="필드, setter 주입 방법의 필요성"></a>필드, setter 주입 방법의 필요성</h3><p>순환 참조 시에 사용할 수 있다.</p><p>두개의 클래스가 각자를 참조하고 있는데 생성자를 통한 주입을 이용하게 되면, 둘 중 어떤 클래스의 객체도 만들어지지 않게되고, App은 실행조차 되지 않는다.<br>순환참조는 피하는게 좋지만, 어쩔 수 없는 상황이면 Setter나 필드 주입방법을 사용하면 되겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;필드-주입&quot;&gt;&lt;a href=&quot;#필드-주입&quot; class=&quot;headerlink&quot; title=&quot;필드 주입&quot;&gt;&lt;/a&gt;필드 주입&lt;/h2&gt;&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;를 이용한 의존성 주입 방식&lt;br&gt;의존성을 갖는 변수를 선언하고
      
    
    </summary>
    
    
    
      <category term="Spring" scheme="http://albaneo93.github.io/tags/Spring/"/>
    
      <category term="Back-end" scheme="http://albaneo93.github.io/tags/Back-end/"/>
    
  </entry>
  
  <entry>
    <title>Spring의 Restcontroller</title>
    <link href="http://albaneo93.github.io/2020/05/17/spring-restcontroller/"/>
    <id>http://albaneo93.github.io/2020/05/17/spring-restcontroller/</id>
    <published>2020-05-17T12:02:07.000Z</published>
    <updated>2020-11-02T14:37:09.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-사용-중-실수로-발생했던-에러"><a href="#Spring-사용-중-실수로-발생했던-에러" class="headerlink" title="Spring 사용 중 실수로 발생했던 에러"></a>Spring 사용 중 실수로 발생했던 에러</h2><p>SSAFY 동기들과 프로젝트를 진행 중 테스트를 상황에서 생겼던 에러입니다</p><p>분명 제대로 작성한 코드같았으나, postman을 이용하거나 크롬등의 웹 브라우저를 이용하여도 예상된 응답인 “test api”가 오지 않고<br>계속해서 “404 NotFound” 에러만 발생하였습니다</p><p>문제의 코드는 다음과 같습니다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test api"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여러 부분을 고쳐가며 진행한 결과 다음의 코드로 에러를 해결할 수 있었습니다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">MyController</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test api"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController 어노테이션 밑에 <code>@RequestMapping</code> 어노테이션을 추가해주었습니다<br>즉, @RestController 어노테이션은 주소 매핑 기능이 없어 /api라는 주소 자체가 매핑이 되어있지 않았으며,<br>이로인해 아무리 알맞는 주소를 입력하여도 404 NotFound에러가 발생한 것입니다.</p><p>연속된 프로젝트로 인해 자신감있게 작성한 코드에 문제가 생긴것을 보고 <strong>더 많은 연습이 필요함</strong>을 느꼈습니다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-사용-중-실수로-발생했던-에러&quot;&gt;&lt;a href=&quot;#Spring-사용-중-실수로-발생했던-에러&quot; class=&quot;headerlink&quot; title=&quot;Spring 사용 중 실수로 발생했던 에러&quot;&gt;&lt;/a&gt;Spring 사용 중 실수로 발
      
    
    </summary>
    
    
      <category term="errorlog" scheme="http://albaneo93.github.io/categories/errorlog/"/>
    
    
      <category term="server" scheme="http://albaneo93.github.io/tags/server/"/>
    
      <category term="spring boot" scheme="http://albaneo93.github.io/tags/spring-boot/"/>
    
      <category term="spring" scheme="http://albaneo93.github.io/tags/spring/"/>
    
      <category term="java" scheme="http://albaneo93.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring IoC에 대하여</title>
    <link href="http://albaneo93.github.io/2020/05/15/About-Spring-IoC/"/>
    <id>http://albaneo93.github.io/2020/05/15/About-Spring-IoC/</id>
    <published>2020-05-15T14:31:33.000Z</published>
    <updated>2020-11-02T14:37:09.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-제어의-역전-IoC-Iversion-of-Control"><a href="#Spring-제어의-역전-IoC-Iversion-of-Control" class="headerlink" title="Spring 제어의 역전(IoC; Iversion of Control)"></a>Spring 제어의 역전(IoC; Iversion of Control)</h1><blockquote><p>**객체에 대한 제어권이 개발자로부터 컨테이너(Spring Container)**에 넘어가면서 객체의 생성부터 생명주기 관리까지의 모든 것을 컨테이너가 맡아서 하게되는 것</p></blockquote><p>일반적인 개발방식에서, 모든 인스턴스에 대한 권한은 개발하며 코드상에 객체의 생성 삭제 등을 작성하는 개발자의 몫이었음 ==&gt; 객체의 <code>제어 권한이 개발자</code>에게 있음</p><h2 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h2><p>컨테이너가 인터페이스를 통해 의존성이 있는 클래스의 객체를 생성하고<br>생성한 객체를 이를 사용하려는 클래스에 주입을 해준다<br>여기서 <code>의존성 주입(DI; Dependency Injection)</code>이 등장한다</p><h3 id="일반적인-형태의-의존성-주입"><a href="#일반적인-형태의-의존성-주입" class="headerlink" title="일반적인 형태의 의존성 주입"></a>일반적인 형태의 의존성 주입</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="comment">// A에서 B클래스의 객체를 사용한다</span></span><br><span class="line">  <span class="comment">// 이렇게 어떠한 클래스에서 다른 클래스의 객체를 사용할때 의존성 관계에 있다고 하고</span></span><br><span class="line">  <span class="comment">// 이 경우 A클래스가 B클래스에 의존성이 있다고 한다</span></span><br><span class="line">  <span class="keyword">private</span> B bInstance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constructor</span></span><br><span class="line">  A()&#123;</span><br><span class="line">    bInstance = <span class="keyword">new</span> B();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IoC에-의한-의존성-주입"><a href="#IoC에-의한-의존성-주입" class="headerlink" title="IoC에 의한 의존성 주입"></a>IoC에 의한 의존성 주입</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="comment">// 클래스내에서 직접 객체를 생성하지 않는다</span></span><br><span class="line">  <span class="keyword">private</span> B bInstance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 생성자를 통해서 외부의 누군가가 파라미터로 주입해준 객체를 이용한다</span></span><br><span class="line">  <span class="comment">// 외부에서 설정된(Configured) 객체를 집어넣어주는 것이다</span></span><br><span class="line">  A(B b)&#123;</span><br><span class="line">    bInstance = b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스프링 컨테이너는 처음 구동시 클래스의 객체를 생성해두고<br>해당 객체(ex. @Autowired 어노테이션이 선언된 인스턴스 객체 )를 사용할 때, <strong>인터페이스로 이를 제공</strong>해 <code>인터페이스 기반의 컴포넌트화</code>를 구현한다</p><p>Spring 컨테이너가 실행하는 인스턴스화는 기본적으로 1회만 실행하여 필요한곳에 사용한다. 즉, 기본적으로 Singleton으로 생성을 함</p><p>@Autowired와 @Component</p><p>Sppring 컨테이너는 첫 구동시에 Component어노테이션이 선언되어있는 클래스의 객체를 생성해둔다</p><p><code>@Component</code>어노테이션을 확장한 3가지의 어노테이션이 존재한다<br><code>@Controller</code><br><code>@Service</code><br><code>@Repository</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-제어의-역전-IoC-Iversion-of-Control&quot;&gt;&lt;a href=&quot;#Spring-제어의-역전-IoC-Iversion-of-Control&quot; class=&quot;headerlink&quot; title=&quot;Spring 제어의 역전(IoC;
      
    
    </summary>
    
    
    
      <category term="Spring" scheme="http://albaneo93.github.io/tags/Spring/"/>
    
      <category term="Back-end" scheme="http://albaneo93.github.io/tags/Back-end/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot-value-annotation</title>
    <link href="http://albaneo93.github.io/2020/05/04/spring-boot-value-annotation/"/>
    <id>http://albaneo93.github.io/2020/05/04/spring-boot-value-annotation/</id>
    <published>2020-05-04T10:19:54.000Z</published>
    <updated>2020-11-02T14:37:09.852Z</updated>
    
    <content type="html"><![CDATA[<p>스프링에는 개발에 도움이되는 많은 어노테이션이 있습니다. 그중 오늘은 <code>@Value</code> 어노테이션에 대해 알아보도록 하겠습니다</p><h2 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h2><ul><li>spring에서 application.properties에 작성된 값을 자바의 변수에 매핑해주는 어노테이션으로 요청을 하는 서버의 URL등을 설정해두고 변수에 매핑을 해서 사용한다</li></ul><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><p>application.properties의 값만 바꾸면 되니, 많은 값들을 한번에 바꿀 수 있어 유지보수에 용이하다</p><h2 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h2><p>값을 할당하고 싶은 변수의 바로 상단에 @Value(“${}”)를 선언하고<br>중괄호 안에 key값을 적어주면 된다</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">in</span> <span class="string">application.properties</span></span><br><span class="line"><span class="string">//</span> <span class="string">key</span> <span class="string">=</span> <span class="string">value</span> <span class="string">형태</span></span><br><span class="line"><span class="string">my.custom.url=http://my.url.com</span></span><br><span class="line"><span class="string">custom.local.path=classpath:/static/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">something</span></span>&#123;</span><br><span class="line">    <span class="comment">// requestURL변수에 my.custom.url을 키로하는 값인 http://my.url.com이 할당된다</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;my.custom.url&#125;"</span>)</span><br><span class="line">    String requestURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;custom.local.path&#125;"</span>)</span><br><span class="line">    String local_file_path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMthod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String url = requestURL;</span><br><span class="line">        <span class="comment">// classpath/static 을 경로로하는 파일객체 생성</span></span><br><span class="line">        File newFile = <span class="keyword">new</span> File(local_file_path);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;스프링에는 개발에 도움이되는 많은 어노테이션이 있습니다. 그중 오늘은 &lt;code&gt;@Value&lt;/code&gt; 어노테이션에 대해 알아보도록 하겠습니다&lt;/p&gt;
&lt;h2 id=&quot;Value&quot;&gt;&lt;a href=&quot;#Value&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MVC, MVP, MVVM 패턴</title>
    <link href="http://albaneo93.github.io/2020/05/04/mvc-mvp-mvvm-pattern/"/>
    <id>http://albaneo93.github.io/2020/05/04/mvc-mvp-mvvm-pattern/</id>
    <published>2020-05-04T07:18:27.000Z</published>
    <updated>2020-11-02T14:37:09.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>기존의 all-in-one 방식의 문제점인, 프로젝트 규모가 커지거나 잦은 업무변경 발생시 어려워지는 유지보수를 개선하기 위해 제안된 방식</p><p>Model, View, Controller의 3가지 컴포넌트로 역할을 나누어 프로그램을 구성한다</p><h3 id="MVC-패턴의-이점"><a href="#MVC-패턴의-이점" class="headerlink" title="MVC 패턴의 이점"></a>MVC 패턴의 이점</h3><ul><li>높은 재사용성<ul><li>look and feel 을 쉽게 교체할 수 있다.</li><li>one source multi use를 구현할 수 있다.</li><li>코드를 재사용할 수 있다.</li></ul></li><li>빠른 개발, 저렴한 비용<ul><li>다른 프로젝트에서도 모델 컴포넌트를 재사용할 수 있어 개발 속도가 빨라진다</li><li>소스 코드를 역할에 따라 여러 컴포넌트로 쪼개게 되면 전체적인 개발 유지보수 비용을 줄일 수 있다.</li></ul></li></ul><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><blockquote><p>Database와 연동하여 사용자가 입력한 데이터나 사용자에게 출력할 데이터를 다루는 일을 한다.(트랜잭션을 다루는 일)</p></blockquote><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><blockquote><p>모델이 처리한 데이터나 그 작업의 결과를 갖고 사용자에게 출력할 화면을 만드는 일을 한다.</p></blockquote><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><blockquote><p>클라이언트의 요청을 받았을 때 그 요청에 대해 실제 업무를 수행하는 <strong>모델 컴포넌트를 호출</strong>한다. 또한, 클라이언트가 보낸 데이터가 있다면, 모델을 호출하기 전 데이터를 적절히 가공하는 역할을 한다</p></blockquote><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><p>사용자의 입력(Action)이 Controller를 통해 들어온다<br>Controller는 여러개의 View를 <code>선택</code>할 수 있는 1:N 구조<br>Controller는 View를 선택할 뿐 직접 업데이트 하지 않는다 (View는 컨트롤러를 알지 못한다)</p><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>Model, View, Presenter로 구성<br>MVC패턴에서 Controller대신 Presenter가 존재</p><h4 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter?"></a>Presenter?</h4><blockquote><p>View에서 요청한 정보로 Model을 가공하여 View에 전달해 주는 부분. View와 Model을 이어주는 컴포넌트라고 생각하면 될 듯 하다</p></blockquote><p>Presenter가 Model과 View의 중간에서 다리역할을 하여, 요청을 받고, 데이터를 요청하며, 데이터를 가공하고 가공한 데이터를 View에 보내줌</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><p>View와 Model의 의존성이 사라진다.</p><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><p>Presenter와 View가 높은 의존성을 갖게된다</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>Model, View, View Model로 구성된 디자인 패턴</p><h4 id="View-Model"><a href="#View-Model" class="headerlink" title="View Model"></a>View Model</h4><blockquote><p>View를 표현하기 위해 만든 View를 위한 Model. View를 나타내 주기 위한 Model이자 View를 나타내기 위해 데이터를 처리하는 부분</p></blockquote><h3 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h3><p><strong>Command패턴</strong>과 <strong>DataBinding</strong> 두가지 패턴을 사용하여 구현됨<br>위의 두가지 요소를 이용해 View와 ViewModel 사이의 의존성을 없앴다<br>View Model과 View는 1:N 관계이다</p><h3 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h3><p>View와 Model사이의 의존성이 사라짐. 또한 Command패턴과 Data Binding을 사용하여 View Model 사이의 의존성 또한 없앤 디자인 패턴. 각 부분이 독립적이기에 모듈화하여 개발할 수 있다</p><h3 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h3><p>View Model의 설계가 쉽지 않다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;p&gt;기존의 all-in-one 방식의 문제점인, 프로젝트 규모가 커지거나 잦은 업무변경 발생시 어려워지는 유지보수를 개선하
      
    
    </summary>
    
    
      <category term="design pattern" scheme="http://albaneo93.github.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="http://albaneo93.github.io/tags/design-pattern/"/>
    
      <category term="pattern" scheme="http://albaneo93.github.io/tags/pattern/"/>
    
      <category term="software engineering" scheme="http://albaneo93.github.io/tags/software-engineering/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile과 Docker-compose</title>
    <link href="http://albaneo93.github.io/2020/04/22/docker-basic/"/>
    <id>http://albaneo93.github.io/2020/04/22/docker-basic/</id>
    <published>2020-04-22T14:37:04.000Z</published>
    <updated>2020-11-02T14:37:09.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><ul><li><p>from</p><ul><li>docker hub에 있는 이미지를 가져와 베이스로 사용한다</li><li>alpine이라는 정말 필요한 최소한의 기능만 있는 이미지 또한 있어, 이미지 용량을 매우 많이 줄일 수 있다.</li></ul></li><li><p>arg</p><ul><li>Dockerfile로 이미지를 빌드할때만 사용할 변수를 선언한다</li><li>빌드시점에만 사용</li><li>docker build시에 –build-arg 옵션을 이용해 오버라이딩 가능</li></ul></li><li><p>env</p><ul><li>환경 변수 지정</li><li>$변수 or ${변수} 형태로 표현</li><li>docker run 시에 -e 옵션을 이용해 오버라이딩 가능</li></ul></li><li><p>workdir</p><ul><li>컨테이너 내에서 사용할 Working Directory를 지정한다</li><li>orkdir 밑으로 오는 명령어는 workdir로 지정한 경로가 기본경로가 된다</li></ul></li><li><p>copy</p><ul><li>copy src dest 형태</li><li>src의 디렉터리 및 파일을 컨테이너의 경로 or workdir 기준 상대경로로 복사한다.</li><li>파일을 그대로 가져오고, 권한도 그대로</li><li>ex) copy /src /src ==&gt; dockerfile이 있는 곳의 src디렉토리를 컨테이너 내부의 src디렉토리로 복사</li></ul></li><li><p>add</p><ul><li>add src dest</li><li>src의 디렉터리 및 파일을 컨테이너의 경로 or workdir 기준 상대경로로 복사한다.</li><li>압축파일인 경우, 압축을 해제</li><li>OS에 따라 압축해제 여부</li><li>파일은 소유 root:root 와 기존 권한을 가짐</li><li>URL은 소유 root:root와 600 권한을 가짐</li></ul></li><li><p>volume</p><ul><li>컨테이너 내부의 디렉토리를 호스트의 디렉토리와 링크하기 위한 커맨드</li><li>보통 DB의 테이블데이터나, 프로그램 가동시 생성되는 로그파일들이 저장되어 있는 디렉토리를 링크한다</li></ul></li><li><p>expose</p><ul><li>외부로 노출할 포트를 지정한다</li></ul></li><li><p>as</p></li><li><p>run</p><ul><li>터미널 명령어를 실행할 수 있음<br>ex) 예시로 echo “hello world”</li><li>새로운 레이어를 생성하거나, 생성된 layer 위에서 command를 실행-</li><li>pacakge를 설치하는 명령어룰 주로 사용한다</li></ul></li><li><p>cmd</p><ul><li>컨테이너가 처음 시작될때 실행</li><li>Dockerfile에서 한번만 사용 가능<ul><li>마지막 CMD만 사용된다</li></ul></li><li>CMD [“실행파일”,”매개 변수”,”매개 변수..”]</li><li>docker run [IMAGE] [COMMAND] 에서 COMMAND를 넣으면 CMD가 무시됨</li></ul></li><li><p>entrypoint</p><ul><li>컨테이너가 처음 시작될때 실행</li><li>CMD와 같이 있으면, CMD는 매개변수, ENTRYPOINT는 실행파일 역할</li><li>docker run –entrypoint=”[COMMAND] [IMAGE]”를 사용해 무시 가능</li></ul></li></ul><h3 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:lts-alpine as build-stage</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package*.json ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install --production</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:stable-alpine as production-stage</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build-stage /app/dist /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>,<span class="string">"-g"</span>,<span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="ARG와-ENV의-차이"><a href="#ARG와-ENV의-차이" class="headerlink" title="ARG와 ENV의 차이"></a>ARG와 ENV의 차이</h4><h4 id="ADD와-COPY의-차이"><a href="#ADD와-COPY의-차이" class="headerlink" title="ADD와 COPY의 차이"></a>ADD와 COPY의 차이</h4><h4 id="CMD와-ENTRYPOINT의-차이"><a href="#CMD와-ENTRYPOINT의-차이" class="headerlink" title="CMD와 ENTRYPOINT의 차이"></a>CMD와 ENTRYPOINT의 차이</h4><hr><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><ul><li>문서작성 한번으로 여러개의 도커 컨테이너를 생성하고 실행</li><li>docker-compose.yml 파일을 작성해 이미지 빌드 및 실행</li></ul><h3 id="빌드-및-실행"><a href="#빌드-및-실행" class="headerlink" title="빌드 및 실행"></a>빌드 및 실행</h3><ul><li>docker-compose build : docker-compose.yml 파일을 읽어 내용대로 도커 이미지를 빌드</li><li>docker-compose up : docker-compose.yml 파일을 읽어 내용대로 이미지를 생성하고 실행</li></ul><h3 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h3><ul><li>version : docker-compose의 버전을 지정</li><li>serveices : 여러개의 이미지를 빌드하거나, dockerfile을 이용해 빌드가 가능하다</li></ul><h3 id="Docker-compose-yml"><a href="#Docker-compose-yml" class="headerlink" title="Docker-compose.yml"></a>Docker-compose.yml</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">    <span class="comment"># 만들어진 Dockerfile을 이용해서 이미지를 빌드하고 실행</span></span><br><span class="line">    front:</span><br><span class="line">        build:</span><br><span class="line">            <span class="comment"># Dockerfile을 이용한 빌드시 기준경로가 되는 디렉터리</span></span><br><span class="line">            context: ./front-sk</span><br><span class="line">            dockerfile: Dockerfile</span><br><span class="line">        <span class="comment"># 컨테이너의 이름을 day4_front로 지정</span></span><br><span class="line">        container_name: day4_front</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">"80:80"</span></span><br><span class="line">    <span class="comment"># mysql:5.7.29 이미지를 이용해 Database를 생성하고 시작</span></span><br><span class="line">    db:</span><br><span class="line">        image: mysql:<span class="number">5.7</span>.<span class="number">29</span></span><br><span class="line">        restart: always</span><br><span class="line">        <span class="comment"># 이미지가 expose하는 3306포트를 10101포트로 매핑</span></span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">"10101:3306"</span></span><br><span class="line">        container_name: day4_db</span><br><span class="line">        <span class="comment"># docker run -e 옵션을 지정하는 방법</span></span><br><span class="line">        environment:</span><br><span class="line">            - MYSQL_ROOT_PASSWORD=root</span><br><span class="line">            - MYSQL_DATABASE=ssafy</span><br><span class="line">        <span class="comment"># command명령어를 통해 추가 옵션을 지정할 수 있다</span></span><br><span class="line">        command: [<span class="string">'mysqld'</span>,<span class="string">'--character-set-server=utf8mb4'</span>,<span class="string">'--collation-server=utf8mb4_unicode_ci'</span>]</span><br><span class="line"></span><br><span class="line">    back:</span><br><span class="line">        build:</span><br><span class="line">            context: ./back-sk</span><br><span class="line">            dockerfile: Dockerfile</span><br><span class="line">        container_name: day4_back</span><br><span class="line">        ports:</span><br><span class="line">            - <span class="string">"10001:8080"</span></span><br></pre></td></tr></table></figure><hr><h2 id="ETC"><a href="#ETC" class="headerlink" title="ETC"></a>ETC</h2><h3 id="알파인-리눅스-Alpine-Linux"><a href="#알파인-리눅스-Alpine-Linux" class="headerlink" title="알파인 리눅스 (Alpine Linux)"></a>알파인 리눅스 (Alpine Linux)</h3><h4 id="개요-1"><a href="#개요-1" class="headerlink" title="개요"></a>개요</h4><ul><li>가볍고 간단하고 보안성을 목적으로 개발한 리눅스 배포판</li><li>apk 패키지 관리자</li><li>Docker이미지의 경우 5MB의 작은 용량을 가짐</li></ul><h3 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h3><ul><li>docker-compose 공식 문서 : <a href="https://docs.docker.com/compose/compose-file/compose-versioning/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.docker.com/compose/compose-file/compose-versioning/</a></li><li>docker hub : <a href="https://hub.docker.com/" rel="external nofollow noopener noreferrer" target="_blank">https://hub.docker.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;from&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker hub에
      
    
    </summary>
    
    
      <category term="Server" scheme="http://albaneo93.github.io/categories/Server/"/>
    
      <category term="Docker" scheme="http://albaneo93.github.io/categories/Server/Docker/"/>
    
      <category term="CI/CD" scheme="http://albaneo93.github.io/categories/Server/Docker/CI-CD/"/>
    
    
      <category term="Docker" scheme="http://albaneo93.github.io/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="http://albaneo93.github.io/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cache</title>
    <link href="http://albaneo93.github.io/2020/03/30/spring-cache/"/>
    <id>http://albaneo93.github.io/2020/03/30/spring-cache/</id>
    <published>2020-03-30T11:44:19.000Z</published>
    <updated>2020-11-02T14:37:09.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cache"><a href="#cache" class="headerlink" title="cache?"></a>cache?</h2><p>컴퓨터과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 가리킨다<br><br>캐시는 캐시의 접근 시간에 비해 원래 데이터를 접근하는 시간이 오래 걸리는 경우나 값을 다시 계산하는 시간을 절약하고 싶은 경우에 사용한다<br><a href="https://ko.wikipedia.org/wiki/%EC%BA%90%EC%8B%9C" rel="external nofollow noopener noreferrer" target="_blank">캐시(위키백과)</a></p><p>자주 사용하는 데이터 or 자주 접근하는 데이터를 메모리상에 저장해두고, 필요할때마다 데이터베이스에 접근하여 데이터를 가져오는 것이 아닌, 메모리에서 바로 불러오는 기술을 뜻한다.</p><h2 id="Springboot-프로젝트에-Cache-적용하기"><a href="#Springboot-프로젝트에-Cache-적용하기" class="headerlink" title="Springboot 프로젝트에 Cache 적용하기"></a>Springboot 프로젝트에 Cache 적용하기</h2><ol><li><p>“Spring-boot-starter-cache” 라이브러리 의존성을 추가한다</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-cache'</span></span><br></pre></td></tr></table></figure></li><li><p>캐시 기능을 사용하고싶은 프로젝트에 @EnableCaching 어노테이션을 선언한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>캐시를 적용하고싶은 메서드에 @Cacheable 어노테이션을 선언</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전체상품의 리스트를 가져오는 메서드</span></span><br><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"products"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String, Object&gt; <span class="title">getProductList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="캐시-설정-어노테이션"><a href="#캐시-설정-어노테이션" class="headerlink" title="캐시 설정 어노테이션"></a>캐시 설정 어노테이션</h3><table><thead><tr><th>어노테이션</th><th>설명</th></tr></thead><tbody><tr><td>@Cacheable</td><td>메소드에 캐시 트리거 설정</td></tr><tr><td>@CachePut</td><td>메소드 실행과 방해없이 캐시 갱신</td></tr><tr><td>@CacheEvict</td><td>캐시되있는 데이터 지우기</td></tr><tr><td>@CacheConfig</td><td>캐시 관련 설정</td></tr><tr><td>@EnableCache</td><td>스프링 캐시 활성화</td></tr></tbody></table><h3 id="캐시-어노테이션들의-속성"><a href="#캐시-어노테이션들의-속성" class="headerlink" title="캐시 어노테이션들의 속성"></a>캐시 어노테이션들의 속성</h3><table><thead><tr><th>어노테이션</th><th>설명</th></tr></thead><tbody><tr><td>value</td><td>캐시의 이름</td></tr><tr><td>key</td><td>캐시할 키를 설정(기본설정하지 않으면 파라미터로 설정)</td></tr><tr><td>condition</td><td>특정 조건에 따라 캐시를 할지 않을지 결정</td></tr><tr><td>cacheManager</td><td>해당 캐시 매니저를 이용해 캐시를 사용</td></tr></tbody></table><h3 id="Cache-Manager의-종류"><a href="#Cache-Manager의-종류" class="headerlink" title="Cache Manager의 종류"></a>Cache Manager의 종류</h3><ul><li>ConcurrentMapCacheManager (default) : 캐시매니저를 선언하지 않으면 기본값으로 작동</li><li>Ehcache : 실 서비스하는 제품에서 많이 사용한다</li><li>redis : 사용하려면 spring-boot-starter-data-redis를 의존성추가 해주어야한다</li></ul><h2 id="캐시-테스트"><a href="#캐시-테스트" class="headerlink" title="캐시 테스트"></a>캐시 테스트</h2><p>JMeter를 이용하여 api의 응답시간 속도차를 비교한다<br><br>100개의 스레드를 이용해 부하를 주어 테스트를 하였다.</p><ul><li><p>캐시 적용 전</p><img src="/2020/03/30/spring-cache/nocache_response.png" class title="캐시 미적용 응답시간"></li><li><p>캐시 적용 후</p><img src="/2020/03/30/spring-cache/cache_response.png" class title="캐시 적용 응답시간"></li></ul><blockquote><p>캐시 적용전 스레드가 많아질수록 응답시간은 길어져 최대 약 3300ms까지 응답시간이 증가하였다.<br>하지만, 캐시 적용후에는 최대 약 330ms로 90% 감소함을 알 수 있으며, 불러오는 데이터으 양이 많고, API요청이 많을수록 성능폭은 크게 차이날 것으로 예상된다.</p></blockquote><h2 id="캐시-사용시-주의할-점"><a href="#캐시-사용시-주의할-점" class="headerlink" title="캐시 사용시 주의할 점"></a>캐시 사용시 주의할 점</h2><ol><li>계획없이 캐시를 적용하면 오히려 성능이 떨어질 수 있다<ul><li>캐시는 메모리에 데이터를 저장해뒀다 필요할 때 가져오는 방법이기에, 데이터의 양 대비 메모리의 용량이 작다면 시스템의 성능저하를 일으킬 수 있다.</li></ul></li></ol><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://spring.io/guides/gs/caching/" rel="external nofollow noopener noreferrer" target="_blank">Spring Cache 공식 문서</a><br><br><a href="https://minwan1.github.io/2018/03/18/2018-03-18-Spring-Cache/" rel="external nofollow noopener noreferrer" target="_blank">Wan 님의 블로그</a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cache&quot;&gt;&lt;a href=&quot;#cache&quot; class=&quot;headerlink&quot; title=&quot;cache?&quot;&gt;&lt;/a&gt;cache?&lt;/h2&gt;&lt;p&gt;컴퓨터과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 가리킨다&lt;br&gt;&lt;br&gt;캐시는 캐시의 접근
      
    
    </summary>
    
    
    
      <category term="spring" scheme="http://albaneo93.github.io/tags/spring/"/>
    
      <category term="java" scheme="http://albaneo93.github.io/tags/java/"/>
    
      <category term="springboot" scheme="http://albaneo93.github.io/tags/springboot/"/>
    
      <category term="cache" scheme="http://albaneo93.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>이진탐색</title>
    <link href="http://albaneo93.github.io/2020/03/17/binary-search/"/>
    <id>http://albaneo93.github.io/2020/03/17/binary-search/</id>
    <published>2020-03-17T04:21:37.000Z</published>
    <updated>2020-11-02T14:37:09.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>분할 정복 (devide and conquer) 기법을 이용한 탐색방법<br><br>정렬이 되어있어야 탐색이 가능하다<br>탐색시간은 O (lg n) 시간을 갖는다</p><h2 id="이진-탐색-Binary-Search"><a href="#이진-탐색-Binary-Search" class="headerlink" title="이진 탐색 (Binary Search)"></a>이진 탐색 (Binary Search)</h2><h3 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 타겟의 값이 배열 내에 있으면 해당 위치를</span></span><br><span class="line"><span class="comment">// 타겟의 값이 없으면, 타겟이 들어갈 위치값을 리턴</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            start = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="출력-결과"><a href="#출력-결과" class="headerlink" title="출력 결과"></a>출력 결과</h3><img src="/2020/03/17/binary-search/binary_search_result.png" class title="Binary_Search Result"><hr><h2 id="하한선-Lower-Bound"><a href="#하한선-Lower-Bound" class="headerlink" title="하한선 (Lower Bound)"></a>하한선 (Lower Bound)</h2><h3 id="소스코드-1"><a href="#소스코드-1" class="headerlink" title="소스코드"></a>소스코드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start =<span class="number">0</span>, end = arr.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (start+end)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &lt; target)&#123;</span><br><span class="line">            start =  mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            end = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="출력-결과-1"><a href="#출력-결과-1" class="headerlink" title="출력 결과"></a>출력 결과</h3><p><img src></p><hr><h2 id="상한선-Upper-Bound"><a href="#상한선-Upper-Bound" class="headerlink" title="상한선 (Upper Bound)"></a>상한선 (Upper Bound)</h2><h3 id="소스코드-2"><a href="#소스코드-2" class="headerlink" title="소스코드"></a>소스코드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end= arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &lt;= target)&#123;</span><br><span class="line">            start= mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            end = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="출력결과"><a href="#출력결과" class="headerlink" title="출력결과"></a>출력결과</h3><p><img src></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h2&gt;&lt;p&gt;분할 정복 (devide and conquer) 기법을 이용한 탐색방법&lt;br&gt;&lt;br&gt;정렬이 되어있어야 탐색이 가능하다&lt;br&gt;탐
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://albaneo93.github.io/tags/java/"/>
    
      <category term="algorithm" scheme="http://albaneo93.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Unable to laod authentication plugin &#39;caching_sha2_password&#39; 에러</title>
    <link href="http://albaneo93.github.io/2020/03/17/mysql-authentication-error/"/>
    <id>http://albaneo93.github.io/2020/03/17/mysql-authentication-error/</id>
    <published>2020-03-17T04:21:37.000Z</published>
    <updated>2020-11-02T14:37:09.852Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 8.x는 인증플러그인으로 caching_sha2_password를 default로 사용하고</p><p>이전 버전인 MySQL 5.x는 mysql_native_password 방식을 default로 사용한다</p><p>기본적인 인증플러그인의 방식때문에 8버전 이용시</p><p><code>MYSQL unable to laod authentication plugin &#39;caching_sah2_password&#39;</code></p><p>에러가 발생하기도 한다</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol><li>사용자에 대해서 password 방식을 5.x 버전에서 사용하던 방식으로 바꾼다</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;$&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;;</span><br></pre></td></tr></table></figure><ol start="2"><li>MySQL의 설정파일인 my.cnf 또는 my.ini 수정</li></ol><p>default_authentication_plugin=caching_sha2_password</p><p>부분을</p><p>default_authentication_plugin=mysql_native_password</p><p>로 수정하고 재부팅</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL 8.x는 인증플러그인으로 caching_sha2_password를 default로 사용하고&lt;/p&gt;
&lt;p&gt;이전 버전인 MySQL 5.x는 mysql_native_password 방식을 default로 사용한다&lt;/p&gt;
&lt;p&gt;기본적인 인증플
      
    
    </summary>
    
    
      <category term="db" scheme="http://albaneo93.github.io/categories/db/"/>
    
      <category term="mysql" scheme="http://albaneo93.github.io/categories/db/mysql/"/>
    
    
      <category term="mysql" scheme="http://albaneo93.github.io/tags/mysql/"/>
    
      <category term="db" scheme="http://albaneo93.github.io/tags/db/"/>
    
      <category term="error" scheme="http://albaneo93.github.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>병합정렬(MergeSort)</title>
    <link href="http://albaneo93.github.io/2020/03/16/mergesort/"/>
    <id>http://albaneo93.github.io/2020/03/16/mergesort/</id>
    <published>2020-03-16T14:40:30.000Z</published>
    <updated>2020-11-02T14:37:09.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h2><p>분할 정복 기법을 사용한 정렬 알고리즘 <br><br>항상 O ( n lg n ) 시간을 소요</p><table><thead><tr><th>비고</th><th>소요 시간</th></tr></thead><tbody><tr><td>Worst</td><td>O(n lg n)</td></tr><tr><td>Average</td><td>O(n lg n)</td></tr><tr><td>Best</td><td>O(n lg n)</td></tr></tbody></table><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Merge Sort</span></span><br><span class="line"><span class="comment"> *  분할 정복 기법을 이용하는 정렬 방법</span></span><br><span class="line"><span class="comment"> *  최악, 최선, 평균시간 모두 O(n log n) 시간</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 임시 배열</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] tmp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 분할된 배열을 정렬하기위한 임시변수</span></span><br><span class="line">        <span class="keyword">int</span> left = start;</span><br><span class="line">        <span class="keyword">int</span> right = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 임시배열의 인덱스를 기억할 변수</span></span><br><span class="line">        <span class="keyword">int</span> tmpidx = start;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// mid를 기준으로 좌 or 우측 배열 중 하나가 완료될때까지 반복문 수행</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= mid &amp;&amp; right &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[left] &lt;= arr[right]) &#123;</span><br><span class="line">                tmp[tmpidx++] = arr[left++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[tmpidx++] = arr[right++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 위에서 정렬되지 않은 값들을 정렬</span></span><br><span class="line">        <span class="comment">// 위에서 한쪽이 완료되었으므로, 나머지 한쪽을 정렬한다</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= mid) &#123;</span><br><span class="line">                tmp[tmpidx++] = arr[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt;= end) &#123;</span><br><span class="line">                tmp[tmpidx++] = arr[right++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 임시배열에 저장된 정렬된 값들을 원래 배열에 덮어쓴다</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">            arr[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">devide</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// start가 end보다 작거나 같다면 정렬할 요소는 1개 남은것을 뜻한다</span></span><br><span class="line">        <span class="comment">// 요소가 2개 이상일때마 정렬을 수행한다</span></span><br><span class="line">        <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            devide(arr, start, mid);</span><br><span class="line">            devide(arr, mid + <span class="number">1</span>, end);</span><br><span class="line">            merge(arr, start, mid, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span> &#125;;</span><br><span class="line">        tmp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"====정렬 전===="</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        devide(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"====정렬 후===="</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 결과</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;정렬 전&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;정렬 후&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;개념&quot;&gt;&lt;a href=&quot;#개념&quot; class=&quot;headerlink&quot; title=&quot;개념&quot;&gt;&lt;/a&gt;개념&lt;/h2&gt;&lt;p&gt;분할 정복 기법을 사용한 정렬 알고리즘 &lt;br&gt;&lt;br&gt;항상 O ( n lg n ) 시간을 소요&lt;/p&gt;
&lt;table&gt;
&lt;thea
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://albaneo93.github.io/categories/algorithm/"/>
    
      <category term="java" scheme="http://albaneo93.github.io/categories/algorithm/java/"/>
    
    
      <category term="algorithm" scheme="http://albaneo93.github.io/tags/algorithm/"/>
    
      <category term="sort" scheme="http://albaneo93.github.io/tags/sort/"/>
    
      <category term="mergesort" scheme="http://albaneo93.github.io/tags/mergesort/"/>
    
  </entry>
  
</feed>
